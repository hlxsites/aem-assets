/* eslint-disable camelcase */
/* eslint-disable no-await-in-loop */
/* eslint-disable no-console */
import { initFirefallConversation } from './conversation.js';
import { generateText, getImage, getText } from './query.js';

async function generateImage(card, generationConfig, cfg) {
  console.log('Invoking getText for generateImage');
  const textResponse = await getText(card.text, 10, cfg);
  const summary = textResponse.generations[0][0].text;
  console.log(`getText Response ${summary}`);
  console.log('Invoking getImage');
  const image = await getImage(/* data.conversation_id */96593, summary, generationConfig.image_adjective, generationConfig.image_tone, cfg);
  console.log(`Get Image Response${JSON.stringify(image, null, 2)}`);
  console.log(image.dialogue.answer);
  if (image.dialogue.answer.image_url[0]) {
    return image.dialogue.answer.image_url[0];
  }
  // retry
  throw new Error('Unfit generateImage response');
}

export default async function generate(topic, { count, text_size }, generationConfig,  cfg) {
  let attempts = 0;
  const cards = [];
  /* Initiate conversation with Firefall */
  console.log('[openai]Initiating conversation with Firefall to generate text...');
  const data = await initFirefallConversation(cfg);
  console.log(`[openai]Firefall conversation initiation response ${JSON.stringify(data, null, 2)}`);
  for (let i = 0; i < count; i += 1) {
    let done = false;
    while (!done) {
      console.log('[openai]Generating text with Firefall');
	  
	  if(generationConfig.text_adjective.toLowerCase().startsWith("more")) {
		  text_size = 50;
	  } else if(generationConfig.text_adjective.toLowerCase().startsWith("less")) {
		  text_size = 10;
	  }  
	  
      const generatedText = await generateText(data.conversation_id, topic, text_size, cfg);
      console.log(`[openai]Firefall generated Text Response ${JSON.stringify(generatedText, null, 2)}`);
      if (generatedText.dialogue.answer) {
        cards.push({
          text: generatedText.dialogue.answer,
        });
        done = true;
      } else {
        attempts += 1;
        console.log(`[openai]Unfit generateText response. Attempts ${attempts}. Retrying...`);
      }
    }
  }

  attempts = 0;
  for (let i = 0; i < cards.length; i += 1) {
    let done = false;
    while (!done) {
      try {
        console.log('[openai]Invoking generateImage');
        const generateImageResponse = await generateImage(cards[i], generationConfig, cfg);
        console.log(`[openai]Image has been generated by Firefall ${JSON.stringify(generateImageResponse, null, 2)}`);
        cards[i].image = generateImageResponse;
        done = true;
      } catch (err) {
        console.log(`Unfit generateImageResponse response. Attempts ${attempts}. Retrying...`);
      }
    }
  }
  return cards;
}

export { generate };
